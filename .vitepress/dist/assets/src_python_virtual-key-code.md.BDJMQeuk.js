import{_ as e,c as d,o as a,ae as o}from"./chunks/framework.Cthp9TdA.js";const i="/assets/virtual-key-code.CdgS6x9O.png",y=JSON.parse('{"title":"python 开发中判断键盘事件的坑点 - 虚拟键码","description":"","frontmatter":{},"headers":[],"relativePath":"src/python/virtual-key-code.md","filePath":"src/python/virtual-key-code.md"}'),c={name:"src/python/virtual-key-code.md"};function r(h,t,l,s,n,p){return a(),d("div",null,t[0]||(t[0]=[o('<h1 id="python-开发中判断键盘事件的坑点-虚拟键码" tabindex="-1">python 开发中判断键盘事件的坑点 - 虚拟键码 <a class="header-anchor" href="#python-开发中判断键盘事件的坑点-虚拟键码" aria-label="Permalink to &quot;python 开发中判断键盘事件的坑点 - 虚拟键码&quot;">​</a></h1><p>[toc] <img src="'+i+'" alt="虚拟键码示意图"></p><h2 id="背景描述" tabindex="-1">背景描述 <a class="header-anchor" href="#背景描述" aria-label="Permalink to &quot;背景描述&quot;">​</a></h2><p>最近，在 Trae 的帮助下，我正在开发一个 Python 项目，这个项目需要判断用户是否按下了特定的键。 我的技术背景是 Java 和 web 前端开发，所以我对 Python 相对比较陌生。跟着 Trae 的指导，我成功地完成了大部分功能，也能加深对 python 的理解。 但是，在开发过程中，我遇到了一个问题，那就是无法获取到用户按下的键的字符。困惑点在于，可以捕捉到一些特定的键，如<code>Ctrl</code>、<code>Shift</code>、<code>Alt</code>等，但是无法捕捉到用户输入的字符。折腾了很久，才发现遇到了一个叫<code>虚拟键码</code>的问题。</p><h2 id="一、什么是虚拟键码" tabindex="-1">一、什么是虚拟键码？ <a class="header-anchor" href="#一、什么是虚拟键码" aria-label="Permalink to &quot;一、什么是虚拟键码？&quot;">​</a></h2><p><strong>虚拟键码（Virtual-Key Code）</strong> 是操作系统为每个物理按键分配的一个固定编号。例如：</p><ul><li><code>A</code> 键对应的虚拟键码是 <code>VK_A = 0x41</code></li><li>回车键是 <code>VK_RETURN = 0x0D</code></li><li>左箭头键是 <code>VK_LEFT = 0x25</code></li></ul><p>这些值与你按的是什么字符无关，只和你按了哪个<strong>物理键</strong>有关。</p><h2 id="二、为什么不能用-key-char" tabindex="-1">二、为什么不能用 <code>key.char</code>？ <a class="header-anchor" href="#二、为什么不能用-key-char" aria-label="Permalink to &quot;二、为什么不能用 `key.char`？&quot;">​</a></h2><p><code>key.char</code> 是按键产生的字符，它会受到以下因素影响：</p><table tabindex="0"><thead><tr><th>影响因素</th><th>对 <code>key.char</code> 的影响</th></tr></thead><tbody><tr><td>输入法</td><td>按下 <code>a</code> 可能变成中文拼音或候选词</td></tr><tr><td>CapsLock 状态</td><td>小写 <code>a</code> 变成大写 <code>A</code></td></tr><tr><td>键盘布局</td><td>同一个键在美式键盘是 <code>Y</code>，德语键盘可能是 <code>Z</code></td></tr><tr><td>组合键（如 AltGr）</td><td>可能输出特殊符号</td></tr></tbody></table><p>所以如果你想知道“用户是不是按了 <strong>左箭头键</strong>”，而他用的是德语键盘或者正在用输入法打字，那么 <code>key.char</code> 很可能无法正确反映他的行为。</p><h2 id="三、举个例子说明" tabindex="-1">三、举个例子说明 <a class="header-anchor" href="#三、举个例子说明" aria-label="Permalink to &quot;三、举个例子说明&quot;">​</a></h2><p>假设你想检测用户是否按下了 <code>A</code> 键：</p><ul><li><p>如果你用：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key.char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><p>那么只有当按下 <code>A</code> 键并输出字符 <code>&#39;a&#39;</code> 时才成立。但如果用户：</p></li><li><p>按下了 CapsLock，变成了 <code>&#39;A&#39;</code></p></li><li><p>使用了输入法，比如输入了 “啊”</p></li><li><p>使用的是 AZERTY 键盘，按下的键不是 <code>&#39;a&#39;</code></p><p>上面的判断就失败了。</p></li><li><p>而如果你用：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key.vk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VK_A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设 VK_A 是 A 键的虚拟键码</span></span></code></pre></div><p>不管用户当前是什么键盘布局、有没有开启 CapsLock、有没有使用输入法，只要他按下了那个物理上的 <code>A</code> 键，就能正确识别。</p></li></ul><h2 id="js-中怎么处理-为什么没遇到过这个问题" tabindex="-1">JS 中怎么处理，为什么没遇到过这个问题？ <a class="header-anchor" href="#js-中怎么处理-为什么没遇到过这个问题" aria-label="Permalink to &quot;JS 中怎么处理，为什么没遇到过这个问题？&quot;">​</a></h2><p>为什么在 <strong>JavaScript 开发中不太容易碰到“输入法干扰、CapsLock 影响、键盘布局不同”等问题”，而</strong>Python 开发中更容易遇到这些麻烦。</p><h3 id="javascript-中的键盘事件机制" tabindex="-1">JavaScript 中的键盘事件机制 <a class="header-anchor" href="#javascript-中的键盘事件机制" aria-label="Permalink to &quot;JavaScript 中的键盘事件机制&quot;">​</a></h3><p>在浏览器环境中（如 Web 开发），JS 的 <code>KeyboardEvent</code> 提供了多个属性，比如：</p><ul><li><code>event.key</code></li><li><code>event.code</code></li><li><code>event.keyCode</code> / <code>event.which</code></li><li><code>event.charCode</code></li></ul><h3 id="js-推荐使用-event-code-来判断物理按键" tabindex="-1">JS 推荐使用 <code>event.code</code> 来判断物理按键 <a class="header-anchor" href="#js-推荐使用-event-code-来判断物理按键" aria-label="Permalink to &quot;JS 推荐使用 `event.code` 来判断物理按键&quot;">​</a></h3><ul><li><code>event.code</code> 表示的是<strong>物理键位</strong>，不受输入法、CapsLock、键盘布局影响。 <ul><li>比如按下了 A 键，不管打出来是 a、A、ā 还是 啊，<code>event.code === &#39;KeyA&#39;</code></li></ul></li><li>所以如果你用 <code>event.code</code>，就可以实现类似虚拟键码的功能，和 Python 中使用 <code>key.vk</code> 是一样的思路。</li></ul><h3 id="但-js-一般不会去监听全局快捷键或做底层控制" tabindex="-1">但 JS 一般不会去监听全局快捷键或做底层控制 <a class="header-anchor" href="#但-js-一般不会去监听全局快捷键或做底层控制" aria-label="Permalink to &quot;但 JS 一般不会去监听全局快捷键或做底层控制&quot;">​</a></h3><ul><li>JS 主要运行在浏览器里，权限有限，不能像 Python 那样监听全局按键（比如用户在其他程序中按下 Ctrl+C）。</li><li>所以在浏览器开发中，你通常只关心当前页面内的交互，输入法处理也是由浏览器统一完成的。</li><li>即使你在网页里写快捷键，只要你不依赖 <code>event.key</code> 而改用 <code>event.code</code>，就不会受输入法等干扰。</li></ul><hr><h2 id="python-中为什么更容易碰到这些问题" tabindex="-1">Python 中为什么更容易碰到这些问题？ <a class="header-anchor" href="#python-中为什么更容易碰到这些问题" aria-label="Permalink to &quot;Python 中为什么更容易碰到这些问题？&quot;">​</a></h2><p>Python 作为一门通用编程语言，常用于：</p><ul><li>编写桌面应用</li><li>自动化脚本（如自动点击、全局热键）</li><li>游戏开发（PyGame）</li><li>系统级工具</li></ul><p>在这种场景下，你需要监听用户的<strong>所有按键行为</strong>，甚至包括系统级别的组合键。这时候就不得不面对：</p><table tabindex="0"><thead><tr><th>场景</th><th>问题</th></tr></thead><tbody><tr><td>使用 <code>pynput</code> 或 <code>keyboard</code> 库监听按键</td><td>得到的是字符（<code>char</code>）而不是物理键</td></tr><tr><td>用户正在使用中文输入法</td><td>输入法会拦截按键，导致你无法获取原始键值</td></tr><tr><td>用户换了键盘布局（如德语键盘）</td><td>同一个键可能打出不同的字符</td></tr><tr><td>CapsLock 开启</td><td>小写变大写，判断失败</td></tr></tbody></table><p>所以，在 Python 中如果不特别注意，很容易因为误用了 <code>key.char</code> 而出错。</p><hr><h2 id="js-vs-python-对比总结" tabindex="-1">JS vs Python：对比总结 <a class="header-anchor" href="#js-vs-python-对比总结" aria-label="Permalink to &quot;JS vs Python：对比总结&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>JavaScript (Web)</th><th>Python</th></tr></thead><tbody><tr><td>是否能监听全局按键</td><td>❌ 不行（受限于浏览器沙盒）</td><td>✅ 可以（通过 pynput、pyHook 等库）</td></tr><tr><td>默认监听的事件类型</td><td>浏览器统一处理输入法、布局</td><td>直接与操作系统交互</td></tr><tr><td>常用按键属性</td><td><code>event.code</code>（推荐）、<code>event.key</code></td><td><code>key.char</code>、<code>key.vk</code></td></tr><tr><td>是否受输入法影响</td><td>❌ 一般不直接受影响（浏览器已处理）</td><td>✅ 容易受影响</td></tr><tr><td>是否受键盘布局影响</td><td>❌ 用 <code>code</code> 不受影响</td><td>✅ 容易受影响</td></tr><tr><td>典型应用场景</td><td>快捷键、表单输入</td><td>自动化、游戏、全局热键</td></tr></tbody></table>',34)]))}const u=e(c,[["render",r]]);export{y as __pageData,u as default};
